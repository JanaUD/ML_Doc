# ML_Doc_2025
Clase de Machine learning

APLICACIÓN DEL ALGORITMO APRIORI
# Primero, instalamos las librerías necesarias en Colab
!pip install polars efficient-apriori great-tables

# Importar las librerías
import polars as pl
from efficient_apriori import apriori
from great_tables import GT, loc, style

# Datos de las transacciones
transacciones = [
    ["Milk", "Bread", "Butter"],
    ["Milk", "Bread"],
    ["Bread", "Butter"],
    ["Milk", "Butter"],
    ["Milk", "Bread", "Butter"]
]

# Aplicar el algoritmo Apriori
conjuntos, reglas = apriori(transacciones, min_support=0.1, min_confidence=0.1)
print("Reglas encontradas:", reglas, end="\n\n")

# Extraer las variables asociadas a cada una de las reglas
antecedentes = [list(rule.lhs) for rule in reglas]
print("Antecedentes:", antecedentes)
consecuentes = [list(rule.rhs) for rule in reglas]
print("Consecuentes:", consecuentes)
confianza = [rule.confidence for rule in reglas]
print("Confianza:", confianza)
soporte = [rule.support for rule in reglas]
print("Soporte:", soporte)
lift = [rule.lift for rule in reglas]
print("Lift:", lift)

# Crear un dataframe de Polars con los datos obtenidos
df_reglas = pl.DataFrame(
    {
        "Antecedente": antecedentes,
        "Consecuente": consecuentes,
        "Confianza": confianza,
        "Soporte": soporte,
        "Lift": lift
    }
)

# Mostrar el dataframe
print(df_reglas)
print("")
print ("Jannet Ortiz Aguilar")

RESULTADOS: 
Requirement already satisfied: polars in /usr/local/lib/python3.11/dist-packages (1.21.0)
Requirement already satisfied: efficient-apriori in /usr/local/lib/python3.11/dist-packages (2.0.5)
Requirement already satisfied: great-tables in /usr/local/lib/python3.11/dist-packages (0.17.0)
Requirement already satisfied: commonmark>=0.9.1 in /usr/local/lib/python3.11/dist-packages (from great-tables) (0.9.1)
Requirement already satisfied: faicons>=0.2.2 in /usr/local/lib/python3.11/dist-packages (from great-tables) (0.2.2)
Requirement already satisfied: htmltools>=0.4.1 in /usr/local/lib/python3.11/dist-packages (from great-tables) (0.6.0)
Requirement already satisfied: importlib-metadata in /usr/local/lib/python3.11/dist-packages (from great-tables) (8.6.1)
Requirement already satisfied: typing_extensions>=3.10.0.0 in /usr/local/lib/python3.11/dist-packages (from great-tables) (4.12.2)
Requirement already satisfied: numpy>=1.22.4 in /usr/local/lib/python3.11/dist-packages (from great-tables) (2.0.2)
Requirement already satisfied: Babel>=2.13.1 in /usr/local/lib/python3.11/dist-packages (from great-tables) (2.17.0)
Requirement already satisfied: importlib-resources in /usr/local/lib/python3.11/dist-packages (from great-tables) (6.5.2)
Requirement already satisfied: packaging>=20.9 in /usr/local/lib/python3.11/dist-packages (from htmltools>=0.4.1->great-tables) (24.2)
Requirement already satisfied: zipp>=3.20 in /usr/local/lib/python3.11/dist-packages (from importlib-metadata->great-tables) (3.21.0)
Reglas encontradas: [{Butter} -> {Bread}, {Bread} -> {Butter}, {Milk} -> {Bread}, {Bread} -> {Milk}, {Milk} -> {Butter}, {Butter} -> {Milk}, {Butter, Milk} -> {Bread}, {Bread, Milk} -> {Butter}, {Bread, Butter} -> {Milk}, {Milk} -> {Bread, Butter}, {Butter} -> {Bread, Milk}, {Bread} -> {Butter, Milk}]

Antecedentes: [['Butter'], ['Bread'], ['Milk'], ['Bread'], ['Milk'], ['Butter'], ['Butter', 'Milk'], ['Bread', 'Milk'], ['Bread', 'Butter'], ['Milk'], ['Butter'], ['Bread']]
Consecuentes: [['Bread'], ['Butter'], ['Bread'], ['Milk'], ['Butter'], ['Milk'], ['Bread'], ['Butter'], ['Milk'], ['Bread', 'Butter'], ['Bread', 'Milk'], ['Butter', 'Milk']]
Confianza: [0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.5, 0.5, 0.5]
Soporte: [0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4]
Lift: [0.9375, 0.9375, 0.9375, 0.9375, 0.9375, 0.9375, 0.8333333333333334, 0.8333333333333334, 0.8333333333333334, 0.8333333333333334, 0.8333333333333334, 0.8333333333333334]
shape: (12, 5)
┌─────────────────────┬─────────────────────┬───────────┬─────────┬──────────┐
│ Antecedente         ┆ Consecuente         ┆ Confianza ┆ Soporte ┆ Lift     │
│ ---                 ┆ ---                 ┆ ---       ┆ ---     ┆ ---      │
│ list[str]           ┆ list[str]           ┆ f64       ┆ f64     ┆ f64      │
╞═════════════════════╪═════════════════════╪═══════════╪═════════╪══════════╡
│ ["Butter"]          ┆ ["Bread"]           ┆ 0.75      ┆ 0.6     ┆ 0.9375   │
│ ["Bread"]           ┆ ["Butter"]          ┆ 0.75      ┆ 0.6     ┆ 0.9375   │
│ ["Milk"]            ┆ ["Bread"]           ┆ 0.75      ┆ 0.6     ┆ 0.9375   │
│ ["Bread"]           ┆ ["Milk"]            ┆ 0.75      ┆ 0.6     ┆ 0.9375   │
│ ["Milk"]            ┆ ["Butter"]          ┆ 0.75      ┆ 0.6     ┆ 0.9375   │
│ …                   ┆ …                   ┆ …         ┆ …       ┆ …        │
│ ["Bread", "Milk"]   ┆ ["Butter"]          ┆ 0.666667  ┆ 0.4     ┆ 0.833333 │
│ ["Bread", "Butter"] ┆ ["Milk"]            ┆ 0.666667  ┆ 0.4     ┆ 0.833333 │
│ ["Milk"]            ┆ ["Bread", "Butter"] ┆ 0.5       ┆ 0.4     ┆ 0.833333 │
│ ["Butter"]          ┆ ["Bread", "Milk"]   ┆ 0.5       ┆ 0.4     ┆ 0.833333 │
│ ["Bread"]           ┆ ["Butter", "Milk"]  ┆ 0.5       ┆ 0.4     ┆ 0.833333 │
└─────────────────────┴─────────────────────┴───────────┴─────────┴──────────┘
Jannet Ortiz Aguilar


APLIACACIÓN DEL ALGORITMO FP-GROWTH

# Primero,  instalamos las librerías necesarias

import pandas as pd
from mlxtend.frequent_patterns import fpgrowth, association_rules
from mlxtend.preprocessing import TransactionEncoder
from tabulate import tabulate

# Datos de las transacciones
transacciones = [
    ["Milk", "Bread", "Butter"],
    ["Milk", "Bread"],
    ["Bread", "Butter"],
    ["Milk", "Butter"],
    ["Milk", "Bread", "Butter"]
]

# Se aplica el algoritmo TransactionEncoder para transformar las transacciones
encoder = TransactionEncoder()
encoded_array = encoder.fit(transacciones).transform(transacciones)

# Se converte los datos transformados en un DataFrame
df = pd.DataFrame(encoded_array, columns=encoder.columns_)

# Se calculan los patrones frecuentes (soporte mínimo de 0.1) y reglas de asociación (soporte mínimo de 0.6 para el lift)
frequent_itemsets = fpgrowth(df, min_support=0.1, use_colnames=True)
rules = association_rules(frequent_itemsets, metric="lift", min_threshold=0.6)

# Se Convierte los conjuntos de antecedente y consecuente en listas para que sean más legibles
rules['antecedents'] = rules['antecedents'].apply(lambda x: list(x))
rules['consequents'] = rules['consequents'].apply(lambda x: list(x))
print(rules)

# Se Seleccionan las columnas relevantes: antecedentes, consecuentes, confianza, soporte y lift
result = rules[['antecedents', 'consequents', 'confidence', 'support', 'lift']]

# Se da formato a la tabla utilizando tabulate para hacerla más legible
formatted_result = tabulate(result, headers='keys', tablefmt='fancy_grid', showindex=False)

# Imprimir la tabla formateada
print(formatted_result)

print("")
print ("Jannet Ortiz Aguilar")

RESULTADOS

        antecedents      consequents  antecedent support  consequent support  \
0          [Butter]           [Milk]                 0.8                 0.8   
1            [Milk]         [Butter]                 0.8                 0.8   
2           [Bread]         [Butter]                 0.8                 0.8   
3          [Butter]          [Bread]                 0.8                 0.8   
4           [Bread]           [Milk]                 0.8                 0.8   
5            [Milk]          [Bread]                 0.8                 0.8   
6   [Bread, Butter]           [Milk]                 0.6                 0.8   
7     [Bread, Milk]         [Butter]                 0.6                 0.8   
8    [Butter, Milk]          [Bread]                 0.6                 0.8   
9           [Bread]   [Butter, Milk]                 0.8                 0.6   
10         [Butter]    [Bread, Milk]                 0.8                 0.6   
11           [Milk]  [Bread, Butter]                 0.8                 0.6   

    support  confidence      lift  representativity  leverage  conviction  \
0       0.6    0.750000  0.937500               1.0     -0.04         0.8   
1       0.6    0.750000  0.937500               1.0     -0.04         0.8   
2       0.6    0.750000  0.937500               1.0     -0.04         0.8   
3       0.6    0.750000  0.937500               1.0     -0.04         0.8   
4       0.6    0.750000  0.937500               1.0     -0.04         0.8   
5       0.6    0.750000  0.937500               1.0     -0.04         0.8   
6       0.4    0.666667  0.833333               1.0     -0.08         0.6   
7       0.4    0.666667  0.833333               1.0     -0.08         0.6   
8       0.4    0.666667  0.833333               1.0     -0.08         0.6   
9       0.4    0.500000  0.833333               1.0     -0.08         0.8   
10      0.4    0.500000  0.833333               1.0     -0.08         0.8   
11      0.4    0.500000  0.833333               1.0     -0.08         0.8   

    zhangs_metric  jaccard  certainty  kulczynski  
0       -0.250000      0.6  -0.250000    0.750000  
1       -0.250000      0.6  -0.250000    0.750000  
2       -0.250000      0.6  -0.250000    0.750000  
3       -0.250000      0.6  -0.250000    0.750000  
4       -0.250000      0.6  -0.250000    0.750000  
5       -0.250000      0.6  -0.250000    0.750000  
6       -0.333333      0.4  -0.666667    0.583333  
7       -0.333333      0.4  -0.666667    0.583333  
8       -0.333333      0.4  -0.666667    0.583333  
9       -0.500000      0.4  -0.250000    0.583333  
10      -0.500000      0.4  -0.250000    0.583333  
11      -0.500000      0.4  -0.250000    0.583333  
╒═════════════════════╤═════════════════════╤══════════════╤═══════════╤══════════╕
│ antecedents         │ consequents         │   confidence │   support │     lift │
╞═════════════════════╪═════════════════════╪══════════════╪═══════════╪══════════╡
│ ['Butter']          │ ['Milk']            │     0.75     │       0.6 │ 0.9375   │
├─────────────────────┼─────────────────────┼──────────────┼───────────┼──────────┤
│ ['Milk']            │ ['Butter']          │     0.75     │       0.6 │ 0.9375   │
├─────────────────────┼─────────────────────┼──────────────┼───────────┼──────────┤
│ ['Bread']           │ ['Butter']          │     0.75     │       0.6 │ 0.9375   │
├─────────────────────┼─────────────────────┼──────────────┼───────────┼──────────┤
│ ['Butter']          │ ['Bread']           │     0.75     │       0.6 │ 0.9375   │
├─────────────────────┼─────────────────────┼──────────────┼───────────┼──────────┤
│ ['Bread']           │ ['Milk']            │     0.75     │       0.6 │ 0.9375   │
├─────────────────────┼─────────────────────┼──────────────┼───────────┼──────────┤
│ ['Milk']            │ ['Bread']           │     0.75     │       0.6 │ 0.9375   │
├─────────────────────┼─────────────────────┼──────────────┼───────────┼──────────┤
│ ['Bread', 'Butter'] │ ['Milk']            │     0.666667 │       0.4 │ 0.833333 │
├─────────────────────┼─────────────────────┼──────────────┼───────────┼──────────┤
│ ['Bread', 'Milk']   │ ['Butter']          │     0.666667 │       0.4 │ 0.833333 │
├─────────────────────┼─────────────────────┼──────────────┼───────────┼──────────┤
│ ['Butter', 'Milk']  │ ['Bread']           │     0.666667 │       0.4 │ 0.833333 │
├─────────────────────┼─────────────────────┼──────────────┼───────────┼──────────┤
│ ['Bread']           │ ['Butter', 'Milk']  │     0.5      │       0.4 │ 0.833333 │
├─────────────────────┼─────────────────────┼──────────────┼───────────┼──────────┤
│ ['Butter']          │ ['Bread', 'Milk']   │     0.5      │       0.4 │ 0.833333 │
├─────────────────────┼─────────────────────┼──────────────┼───────────┼──────────┤
│ ['Milk']            │ ['Bread', 'Butter'] │     0.5      │       0.4 │ 0.833333 │
╘═════════════════════╧═════════════════════╧══════════════╧═══════════╧══════════╛

Jannet Ortiz Aguilar
